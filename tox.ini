[tox]
# this disables the fallback from non existing `pyXYZ` target to make sure we use always use basepython
ignore_basepython_conflict = true
envlist = py310,pep8
skipsdist = true

[testenv]
basepython = python3.10
passenv =
   CI
setenv =
   PYTHONASYNCIODEBUG=1
   DD_DOGSTATSD_DISABLE=1
   DD_TRACE_ENABLED=0
   MERGIFYENGINE_TEST_SETTINGS=fake.env
   MERGIFYENGINE_STORAGE_URL=redis://localhost:6363?db=2
   MERGIFYENGINE_STREAM_URL=redis://localhost:6363?db=3
   PYTEST_TIMEOUT=20
usedevelop = true
extras = test
# nosemgrep generic.ci.security.use-frozen-lockfile.use-frozen-lockfile-pip
install_command = pip install -c requirements.txt {opts} {packages}
commands = {toxinidir}/run-tests.sh pytest -v --timeout_method thread {posargs}

[testenv:cover]
commands = {toxinidir}/run-tests.sh pytest -v --cov=mergify_engine --cov-config .coveragerc {posargs}

[testenv:record]
envdir={toxworkdir}/py310
setenv =
   MERGIFYENGINE_RECORD=1
   DD_DOGSTATSD_DISABLE=1
   DD_TRACE_ENABLED=0
   MERGIFYENGINE_TEST_SETTINGS=test.env
   MERGIFYENGINE_STORAGE_URL=redis://localhost:6363?db=2
   MERGIFYENGINE_STREAM_URL=redis://localhost:6363?db=3
   PYTEST_TIMEOUT=500
whitelist_externals =
    git
commands =
    {[testenv]commands}
    git add zfixtures/cassettes/

[testenv:missing-imports]
extras =
commands = mergify-import-check

[testenv:test]
setenv =
   PYTHONUNBUFFERED=1
   DD_DOGSTATSD_DISABLE=1
   DD_TRACE_ENABLED=0
   MERGIFYENGINE_TEST_SETTINGS=test.env
   MERGIFYENGINE_STORAGE_URL=redis://localhost:6363?db=2
   MERGIFYENGINE_STREAM_URL=redis://localhost:6363?db=3
commands = {toxinidir}/run-tests.sh honcho -f Procfile-test start

[testenv:requirements]
recreate = true
extras =
commands = pip check

[testenv:genreqs]
recreate = true
skip_install = true
commands =
# NOTE(sileht): We don't use pipenv
# nosemgrep: generic.ci.security.use-frozen-lockfile.use-frozen-lockfile-pip
  pip install -c requirements.txt -e .
  pip uninstall --yes mergify-engine
  bash -c "pip freeze --exclude-editable >| requirements.txt"
whitelist_externals =
  bash
  sed

[testenv:venv]
deps = .
commands = bash -c "{posargs}"
whitelist_externals = bash

[testenv:black]
skip_install = true
deps =
  black
  isort
commands =
  isort .
  black .

[testenv:pep8]
extras =
  pep8
  test
whitelist_externals =
  bash
  # FIXME(sileht): allow to use the one from brew until pip installation is fixed
  # https://github.com/returntocorp/semgrep/issues/4311
  semgrep
commands =
  flake8
  isort -c .
  mypy
  yamllint .
  reno lint
  semgrep --config=auto
  mergify-import-check-web
  mergify-import-check-worker
  bash tools/check-obsolete-fixtures.sh

[testenv:docs]
setenv =
  {[testenv]setenv}
  ENABLE_API=True
extras = docs
whitelist_externals =
  rm
  bash
  mkdir
  yarn
commands_pre =
  rm -rf docs/build
  yarn --cwd docs
commands =
  bash -c "git ls-files docs/*.rst | while read file; do if ! grep -q :description: $file; then echo E: no description meta tag in $file; exit 1; fi; done"
  mergify-openapi-spec docs/build/api/openapi.json
  yarn --cwd docs spectral lint -F hint build/api/openapi.json
  yarn --cwd docs sass source/scss/main.scss build/_bootstrap/bootstrap.css
  bash -c "cp -f docs/node_modules/bootstrap/dist/js/bootstrap.min.js* docs/build/_bootstrap/"
  sphinx-build -W -b spelling docs/source docs/build
  sphinx-build -W -b dirhtml docs/source docs/build

[testenv:test-docker]
setenv =
   MERGIFYENGINE_STORAGE_URL=redis://localhost:6363?db=2
   MERGIFYENGINE_STREAM_URL=redis://localhost:6363?db=3
whitelist_externals =
  docker
commands =
  docker build -t engine-dev .
  ./run-tests.sh docker run --rm --net=host --env-file test.env -e MERGIFYENGINE_STORAGE_URL={env:MERGIFYENGINE_STORAGE_URL} -e MERGIFYENGINE_STREAM_URL={env:MERGIFYENGINE_STREAM_URL} -e PORT=8802 -p 8802 engine-dev aio

[flake8]
exclude = .tox,.eggs,docs
show-source = true
select = A,C,E,F,W,B,B950
# E101,W191: Can't ignore tabs indent on multiline strings:
#  https://gitlab.com/pycqa/flake8/issues/375
# E231 and E203 are not respected by black
# builtins:
# A003 allow builtin for class method/attribute
# bugbear:
# B950 is like E501, since we use black we don't care
# B306 is valid only for python 2 and safe for python 3
ignore = E501,W503,E203,G200,G201,E101,W191,E231,B902,B950,B306,A003
enable-extensions = G,FS003

[isort]
force_single_line = true
lines_after_imports = 2
force_sort_within_sections = true
known_first_party = mergify_engine,mergify_engine_signals
known_third_party = datadog
default_section = THIRDPARTY
