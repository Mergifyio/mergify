[tox]
envlist = py39,pep8
skipsdist = true

[testenv]
basepython = python3.9
setenv =
   PYTHONASYNCIODEBUG=1
   MERGIFYENGINE_TEST_SETTINGS=fake.env
usedevelop = true
extras = test
# Now that the engine is setup, install the hardcoded requirement list
commands_pre = pip install -r requirements.txt
commands =
  pifpaf run -g MERGIFYENGINE_STORAGE_URL redis --port 6363 -- pifpaf run -g MERGIFYENGINE_STREAM_URL redis --port 6365 -- pytest -v --pyargs mergify_engine {posargs}

[testenv:cover]
commands =
  pifpaf run -g MERGIFYENGINE_STORAGE_URL redis --port 6363 -- pifpaf run -g MERGIFYENGINE_STREAM_URL redis --port 6365 -- pytest -v --pyargs mergify_engine --cov=mergify_engine --cov-config .coveragerc {posargs}

[testenv:record]
envdir={toxworkdir}/py39
setenv =
   MERGIFYENGINE_RECORD=1
   MERGIFYENGINE_TEST_SETTINGS=test.env
whitelist_externals =
    git
commands =
    {[testenv]commands}
    git add zfixtures/cassettes/

[testenv:missing-imports]
extras =
commands =
  python -c "import mergify_engine.worker"
  python -c "import mergify_engine.asgi"

[testenv:test]
setenv =
   PYTHONUNBUFFERED=1
   MERGIFYENGINE_TEST_SETTINGS=test.env
commands =
    pifpaf run -g MERGIFYENGINE_STORAGE_URL redis --port 6363 -- pifpaf run -g MERGIFYENGINE_STREAM_URL redis --port 6365 -- honcho -f Procfile-test start

[testenv:requirements]
recreate = true
skip_install = true
commands = pip check

[testenv:genreqs]
recreate = true
skip_install = true
deps =
commands_pre =
commands =
  bash -c "sed -e '/^-e ./d' requirements.txt > constraints.txt"
  pip install -c constraints.txt -e .
  pip uninstall --yes mergify-engine
  bash -c "pip freeze --exclude-editable >| requirements.txt"
  bash -c "echo '-e .' >> requirements.txt"
whitelist_externals =
    bash

[testenv:venv]
deps = .
commands = bash -c "{posargs}"
whitelist_externals = bash

[testenv:black]
commands_pre =
skip_install = true
deps =
  black
  isort
commands =
  isort .
  black .

[testenv:pep8]
deps = flake8
       flake8-black
       flake8-blind-except
       flake8-builtins
       flake8-docstrings
       flake8-rst-docstrings
       flake8-logging-format
       isort
       mypy
       pytest
whitelist_externals =
  bash
commands =
  flake8
  isort -c .
  mypy
  bash tools/check-obsolete-fixtures.sh

[testenv:docs]
extras = docs
whitelist_externals =
  rm
  bash
commands =
  rm -rf docs/build
  bash -c "git ls-files docs/*.rst | while read file; do if ! grep -q :description: $file; then echo E: no description meta tag in $file; exit 1; fi; done"
  sphinx-build -W -b html docs/source docs/build

[flake8]
exclude = .tox,.eggs,docs
show-source = true
select = C,E,F,W,B,B950
# E101,W191: Can't ignore tabs indent on multiline strings:
#  https://gitlab.com/pycqa/flake8/issues/375
# E231 and E203 are not respected by black
ignore = E501,W503,E203,G200,G201,E101,W191,E231,B902
enable-extensions = G

[isort]
force_single_line = true
lines_after_imports = 2
force_sort_within_sections = true
known_first_party = mergify_engine
known_third_party = datadog
default_section = THIRDPARTY
